var content = [
	{
		'id':'post_20160917-b',
		'date':'2016-09-17-20-50',
		'title':'How To Build a Computer (Probably) - Nigel - Chapter 2: Graphically Speaking..',
		'content':[
			{'type':'h1', 'innerHTML':"How To Build a Computer (Probably) - Nigel - Chapter 2: Graphically Speaking.."},		
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/1.jpg', 'caption':''},
			{'type':'p', 'innerHTML':"(We assume chapter one is those two 'side quest' posts from before...I may rewrite them into a proper chapter in future, but keeping with my new found drive to post weekly,  lets start here)"},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Obviously any computer we make needs a graphic display...something to help the user interact with the machine, let them know whats going on and what their options are; so begins the Nigel Graphics Card, made using two of the tmega328p chips (same as before) one to talk to the screen and one that does that actual drawing...I'll show you what I mean.."},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/2.png', 'caption':''},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The output chip, is connected to the actual screen through a VGA port, and talks to the screen using the VGA protocols (we'll get to that a little later) this chip contains the information for every pixel that's to be displayed, and instructs the screen to display them. The input chip receives commands from the main Nigel system and stores them in its own graphic language (commands like; draw a circle here of this size and colour) all coded in a similar way to Nigel. This chip then communicates with the output chip to change its stored pixel information."},				
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;So far, I've only written the output chip, and am working on the input chip, and inter-chip communication...hopefully it'll go well."},
			{'type':'h2', 'innerHTML':"The Output Chip"},
			{'type':'h3', 'innerHTML':"The Prolonged VGA Port/Protocol Problem Which Previously Pushed My Patience With Practical Powered Products, But Proved Pretty Plainly Psychologically Palpable And Programmable"},				
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VGA ports (and cables and protocols and whatever) were invented back in the 80's by IBM for their fresh new personal computers, to connect their shiny new computers to their glistening new screens."},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/3.jpg', 'caption':''},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Originally it was just for PS/2 (Personal System/2) IBM machines and screens, but eventually became a global standard and is used in almost every computer since then as an available (and quite nifty) graphical output port. I think it's gradually being replaced by HDMI and DVI-I ports, but mostly all computers and screens still support good 'ol VGA."},
			{'type':'h3', 'innerHTML':"The Plug"},				
			{'type':'p', 'innerHTML':"VGA looks like this:"},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/4.jpg', 'caption':''},
			{'type':'p', 'innerHTML':"There's 15 little connections, or Pins "},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/5.png', 'caption':''},
			{'type':'list','form':'ordered','notation':'1','items':[
				{'type':'p','style':'color:red; margin:0px;','innerHTML':"Red"},
				{'type':'p','style':'color:lime;  margin:0px;','innerHTML':"Green"},
				'<batch>',	{'type':'p','style':'color:blue;  margin:0px;','innerHTML':"Blue"},
							{'type':'p','style':'margin:0px;','innerHTML':"These pins are where the colour data flows in for each line, with a value between 0v and 0.7v to vary the intensity of the colour. "},
				'</batch>',
				{'type':'p','style':'margin:0px;','innerHTML':"Used to be for Screen ID information, but that was replaced by the I2C connections, so this one sits unused, and unloved. I'll plug it into ground.."},
				{'type':'p','style':'margin:0px;','innerHTML':"Ground, completing the circuit."},
				{'type':'p','style':'color:red; margin:0px;','innerHTML':"Red Ground"},
				{'type':'p','style':'color:lime; margin:0px;','innerHTML':"Green Ground"},
				'<batch>',	{'type':'p','style':'color:blue; margin:0px;','innerHTML':"Blue Ground"},
							{'type':'p','style':'margin:0px;','innerHTML':"for completing the <span style='color:red;'>Red</span>, <span style='color:lime;'>Green</span> and <span style='color:blue;'>Blue</span> circuits...it's kinda pointless as I plug these into the regular ground anyway"},
				'</batch>',
				{'type':'p','style':'margin:0px;','innerHTML':"+5v, I'm not sure what this is for..I've plugged it into the ground before and there's been no obvious effect.. I'll just leave it at +5v"},
				{'type':'p','style':'margin:0px;','innerHTML':"Ground, completing the circuit....again."},
				{'type':'p','style':'margin:0px;','innerHTML':"Also used to be for Screen ID information, but that was replaced by the I2C connections, so this one sits unused, but has a more resilient, independent spirit. I'll plug it into ground too.."},
				{'type':'p','style':'margin:0px;','innerHTML':"Used with 'I2C Clock' this pin is used to talk with the screen about what size it is and what it's all about. I don't use it here...maybe in future. Till then: ground."},
				{'type':'p','style':'margin:0px;','innerHTML':"Used for timing the screens horizontal drawing patterns"},
				{'type':'p','style':'margin:0px;','innerHTML':"Used for timing the screens vertical drawing pattern"},
				{'type':'p','style':'margin:0px;','innerHTML':"Used with 'I2C Data'. Grounded."},
				]
			},

			{'type':'h3', 'innerHTML':"The Protocol"},
			{'type':'p', 'innerHTML':"Basic operation is unusual, but pretty simple."},
			{'type':'list','form':'unordered','notation':'disc','items':[
				{'type':'p', 'innerHTML':"As this port was created back when cathode ray tube monitors were still in use; displaying information on screen is based on this idea of the Electron Gun."},
				{'type':'p', 'innerHTML':"The gun is at the back of your screen, pointing at you; shooting electrons at the glass, where a layer of Phosphor, turns this energy into colour...it's a bit more complicated, but since we don't use them anymore it's not really an issue."},
				{'type':'p', 'innerHTML':"The gun shoots from left to right (in the viewers perspective) then goes down a line, and starts from the left again. Once at the bottom, it starts back from the top."}					
				]
			},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/6.png', 'caption':''},		
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Now, here's the confusing bit; we have to use the Horizontal and Vertical sync pins, to teach the screen how long its journey from left to right, and top to bottom should take. It needs a signal from the Horizontal Pin every time e want a new line, and from the Vertical Pin every time we're finished the whole screen. This timing, coupled with how many Horizontal signals occur between Vertical signals, enable the screen to figure out what resolution it should be using."},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Honestly; I've no idea as to how to select any resolution I want..maybe it has something to do with the I2C pins, but I've yet to figure it out. I have (through blind luck) gotten it to assume a 800x600 pixel resolution, which we can stick with for now (the chips are too slow to get above around 96x96 pixels anyway) "},

			{'type':'h3', 'innerHTML':"But Anyway"},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Horizontal and Vertical Sync pins (which I'll be calling HSync and VSync) are normally at 5v, and a signal, is a pulse of 0v. The three colour pins are also important to the timing."},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;There's quite a specific layout for the timing of when these pulses and colour occur. I've divided it into three basic tables, or 'loops' (which makes programming it easy) and I've included the timings that I'm using for the 800x600 output."},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/7.png', 'caption':''},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/8.png', 'caption':''},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/9.png', 'caption':''},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;When running; the Video time, governs how wide the image is, while the combination of Blank and nonBlank HSyncLoops allows you to change its height."},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Through experimentation, I've discovered a little bit of leeway with the timings. I plan on finding the maximum values possible, though for the most part it doesn't really matter. Two of note however: "},
			{'type':'list','form':'unordered','notation':'disc','items':[
				'<batch>',	{'type':'p','style':'margin:0px;','innerHTML':"Video (where all the colour information is put out)"},
							{'type':'p','style':'margin:0px;','innerHTML':"More time here, would allow more information to be sent, effectively increasing the number of pixels."},
				'</batch>',
				'<batch>',	{'type':'p','style':'margin:0px;','innerHTML':"Vertical Sync Pulse"},
							{'type':'p','style':'margin:0px;','innerHTML':"Though not specific because of its job (I used to have this at 0.5us) I found I could get it to around 400us, so I plan on using this time for talking to the other chip. I may use other sections for this job too."},
				'</batch>',
				]
			},

			{'type':'h3', 'innerHTML':"The Prototype"},
			{'type':'p', 'innerHTML':"It took me days to get the screen to do anything at all, but once I did, I got it together pretty fast:"},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/10.jpg', 'caption':"First ever image created. It didn't work properly, it would flash random redish squares, and that text box was the screen telling me that the signal was broken. You can see my little Arduino in the bottom right."},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/11.jpg', 'caption':"The Error Message"},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/12.jpg', 'caption':"Finally Getting It Stabilized"},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/13.jpg', 'caption':"Attempting To Get It To Read Data From The Memory (The pixels are all stretched as I hadn't figured out how to square them yet)"},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/14.jpg', 'caption':"Squared!...ish"},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/15.jpg', 'caption':"The Test Card - After some time, I'd gotten the chip to output cohesive colour"},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/16.jpg', 'caption':"Nigel's First Message To The World"},

			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;These screens were at 51x40 pixels, but I've since gotten this up to 74x55 (I don't think I can go higher, I'll explain why soon)"},

			{'type':'p','style':'margin:0px;', 'innerHTML':"Currently, I have the chip run like this:"},
			{'type':'list','style':'margin:0px;','form':'unordered','notation':'disc','items':[
				{'type':'p','style':'margin:0px;', 'innerHTML':"1 VSyncLoop "},
				{'type':'p','style':'margin:0px;', 'innerHTML':"60 Blank HSyncLoops"},
				{'type':'p','style':'margin:0px;', 'innerHTML':"608 display HSyncLoops"},
				{'type':'p','style':'margin:0px;', 'innerHTML':"22 Blank HSyncLoops "},
				]
			},

			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;So during the Video section of the HSyncLoop, the program first checks to see what line its on, then it goes to its memory and loads the next pixel byte of that line. A pixel byte (being quite simplistic) is made up of 3 bits, one for each colour (Red Green Blue) (with the other 5 going to waste) Using a combination of these three colours, 8 colours can be produced (as you can see in the 'Test Card' picture above)"},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/17.png', 'caption':''},

			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This pixel byte is then loaded into the chip's output port (a couple of pins coming out of the chip) displaying a colour on screen. The program then gathers and outputs the next pixel byte."},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The amount of time between outputting each pixel byte, determines how wide each pixel is."},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This little action happens 51 times, then the end of the HSyncLoop is reached, and we start again."},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HSyncLoop happens 608 times, each time creating a horizontal line of colour on screen. Each loop consults a counter to figure out what part of the screen its on, and what set of Pixels it should be looking for for the line its drawing."},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/13.jpg', 'caption':""},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This image shows us that process. Here, I hadn't written in the counter checker, so each HSyncLoop thinks \"better go to the next set of pixels\""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"There's two main reasons I can't get a higher resolution:"},
			{'type':'list','style':'margin:0px;','form':'unordered','notation':'disc','items':[
				'<batch>',	{'type':'p','style':'margin:0px;','innerHTML':"The chip isn't that fast."},
							{'type':'p','style':'margin:0px;','innerHTML':"Using the current settings and timings, I'm able to program the chip to send out 96 pixels each HSyncLoop. Each action of gathering a pixel, and sending it out, takes 0.18µs (micro seconds) Faster chips can do these types of actions quicker, but I'm limited by this chips speed."},
							{'type':'p','style':'margin:0px;','innerHTML':"\"But wait, if you can do 96 pixels across, why don't you?\" Well I'll tell you.."},
				'</batch>',
				'<batch>',	{'type':'p','style':'margin:0px;','innerHTML':"I don't have enough memory."},
							{'type':'p','style':'margin:0px;','innerHTML':"I could program the chip to output a screen of 96x96 pixels. Every pixels takes up a byte, meaning a screen of 96x96 is 9216bytes. Unfortunately, the chip only has a 2048byte memory, so I have to reduce the number of pixels down below 2048. (51x40=2040)"},
				'</batch>',
				]
			},

			{'type':'h3', 'innerHTML':"Squashing In More"},			
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;But then I had an idea. Each byte uses 3 bits for pixel data, and the rest goes to waste...why don't we use that space? Then we could have double the amount of pixels!"},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/18.png', 'caption':''},
			{'type':'p', 'innerHTML':"Turns out; the amount of time if takes to gather a new byte, is double what it takes to do a 'swap'  of the current byte"},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/19.png', 'caption':''},
			{'type':'p', 'innerHTML':"So it's actually quite easy to do this little trick. "},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/20.jpg', 'caption':'The Larger 74x55 Resolution'},
			{'type':'p','style':'margin:0px;', 'innerHTML':"So now, we have double the pixel space to use."},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2048x2=4096"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;74x55=4070 (2035 bytes)"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wondeful"},

			{'type':'h3', 'innerHTML':"Talking To The Chip"},	
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This is all well and good, but we need to find a way of changing the pixel data in the chip..This means both finding a way for chips to talk to eachother, and figuring out how the input chip's graphical code will work.."},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It's somewhat easy to simply transfer in new pixels one by one into the memory, but we need to draw things into the memory..a more complex task."},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Currently, I have a simple system that looks at the input port of the chip (there's three ports and you can define the direction yourself) and collects all 2035 bytes during the Vertical Sync Pulse; and replaces the ones in the memory as it goes. It works, but is kinda useless, as each frame is deleted and there's no way to say \"don't delete this byte\". It all just gets wiped. So we need a more advanced system; I'm thinking \"Change Bits\""},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/21.png', 'caption':''},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This way, we can program the chip to collect the byte as normal, but then check each pixel byte before putting it in the memory. If a pixel byte has a Change Bit set (as 1) then the program will replace the existing pixel byte with the new one; if not, then it doesn't. It would have to do this for both pixel bytes per byte. "},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This way, the input chip doesn't have to refresh every pixel for every new frame, it can just change the ones it wants to change, leaving the others as they are."},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This particular idea is still in development."},

			{'type':'h3', 'innerHTML':"Talking To The Chip"},	
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;I was thinking; since we can't increase the memory capacity of a chip, why don't we use two chips? Both could be connected to the RGB pins of the VGA port, with only one of them doing the HSyncLoop and VSyncLoop pulses (and both timed together..something I'm already working on) "},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This way, the first chip would take every odd numbered pixel, and the seconds chip doing the even ones. Double the memory, results is a pixel byte capacity of 8192."},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;One could even do more and more chips, though with the chip speed limitation, the width of each pixel would stay the same, eventually exceeding the width of the screen. However with three chips we'd have a pixel byte capacity of 12288, which would allow us to reach the chips maximum density output..which would be pretty cool."},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;But that's for later, when we've figured out one chip first."},

			{'type':'h3', 'innerHTML':"The End?"},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Not particularly, I wanna make this more regular. So expect updates weekly..or fortnightly..or whenever I actually have a development. I think shorter posts more often is probably easier than long ones more spaced out."},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;We'll see how it goes :)"},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Until next time:"},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150814/22.jpg', 'caption':''},

			{'type':'p','style':'margin:0px; text-align: right;', 'innerHTML':"Posted 14th August 2015"},

		]
	},
	{
		'id':'post_20160917-b',
		'date':'2016-09-17-20-50',
		'title':'How to Build a Computer (Probably) - Side Quest 2 - Nigel (upgraded)',
		'content':[
			{'type':'h1', 'innerHTML':"How to Build a Computer (Probably) - Side Quest 2 - Nigel (upgraded)"},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150605/1.jpg', 'caption':''},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;So here's what happened; I was happily programming away and I'd just finished the SquareF command, when I encountered an odd error. Apparently, Nigel had gotten so big that I'd filled the chip's program memory, and the software I was using to write the program wouldn't let me compile anything until I shortened the code. I did, and the final version of Nigel for the PIC16F84A (the proper name of the chip I was working on) will work properly."},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;But I wasn't finished, I wanted Nigel to be bigger and smarter, so I started looking through the website where you can get the PIC16F84A, to see if I could find a bigger one. Two things happened;"},
			{'type':'list','style':'margin:0px;','form':'ordered','notation':'1','items':[
				{'type':'p','style':'margin:0px;', 'innerHTML':"There were thousands of chips to choose from, and I couldn't see the difference between many of them...the website was confusing and unhelpful."},
				{'type':'p','style':'margin:0px;', 'innerHTML':"When I (through random selection) settled on a chip, the older software package didn't have the chip type on it, so I had to get the newer vision. MPLab X it was called...it was useless, overcomplicated and horrific; never get it. Ever."},
				]
			},
			{'type':'p', 'innerHTML':"So I was feeling down about that, when I realized; hay, Arduino's have the same sorta chip in them...so I got one of those :D"},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150605/2.jpg', 'caption':''},
			{'type':'h2', 'innerHTML':"Arduino"},	
			{'type':'p', 'innerHTML':
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;An Arduino, is a cheap little development board. It comes with a microprocessor (the little computer, you can see it there, it's the big chip in the board), usb port (for uploading programs to it), power plug (so you can plug it into a battery), and pins (those black rectangles along the sides)" +"<br>"+
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The idea is, that you can buy one of these (for about 20euro), plug it into your computer with a usb cable, and then using the software that they give you (for free online); you can write programs for it. The pins are useful as you can slot wires into them, and have the Arduino control whatever is attached to them. Like a motor or speaker or lights. With a bit of skill and imagination, you can get them to do just about anything! They're pretty cool." +"<br>"+
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;So, I played around with them for a while (I bought two of them, so I had them communicating with eachother, and singing in time) and this was fun, but I wanted to start on Nigel again."
			},
			{'type':'p', 'innerHTML':
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The chip that runs the board (the microprocessor) is made by Atmel, and is called the Atmega328p. It's got a much bigger program memory, and 100+ commands (as apposed to the other chip's 35 or so) so Nigel commands have more to work with, and can be potentially faster." +"<br>"+
				"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The company makes software for working with their chips called AtmelStudio, which is a much more friendly environment then MPLabX's one. It's still a little complicated, but is clearly better."
			},

			{'type':'p', 'innerHTML':"And it was here, that we began to build our masterpiece; introducing;"},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150605/3.jpg', 'caption':''},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This is still a work in progress, but is already more functional that the previous one (and from here on out, this is the main version too) The chip is alot more complicated, there's alot more features, and I still don't know what much of it does..but I'm learning, and Nigel is coming along well. There's a slightly different code layout, and a few fundamental differences in the new chip means none of the old code could be transferred over. So, I guess we'll start again. Strap yourselves in for a wild ride! (in a sorta, gentle and a little boring sort way)"},

			{'type':'h2', 'innerHTML':"(Hot Out Of The Oven) Overview"},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;So the chip is pretty simple; there's"},
			{'type':'list','style':'margin:0px;','form':'unordered','notation':'disc','items':[
				{'type':'p', 'innerHTML':"a program store (where all the code is kept (this is where Nigel is written))"},
				{'type':'p', 'innerHTML':"the memory (where all the data is kept (this is where Nigel programs are written, and where data those programs are using is stored))"},
				{'type':'p', 'innerHTML':"the working registers (32 hidden bytes, where all the calculations and manipulation of data is done)"},
				]
			},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The program store can only be edited by the programmer (an external machine), so once the program is in there, it can't be changed, only erased and reloaded (I've heard there are ways of getting the chip to reprogram itself, but we're not getting into that) On the plus side though, code written there stays there, unlike in the Memory, where once you turn the power off, all data is lost. The Memory is used to store data for calculations, while calculating them. So like, if you were counting up a number, then needed to switch to a different task, you could store your progress in the Memory, and get back to it later."},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The main difference between the two is; one can't change, the other can."},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Nigel, will be written in the Program Store, and Nigel code will be written in the Memory. This way, we can write all sorts of programs without having to reload the entire chip. And if we plug the chip into a Hard-drive, we can store these programs there, meaning we don't have to worry about losing everything when the power goes off!"},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The working registers are just for Nigel and won't be available to the Nigel code. Unlike in the last version, I'm not going to bother with 'secret registers' and two 'working registers', we only really needed the 'secret register' because there was only one real working register, but now with 32, we have no such issues. And really, you don't need the working registers for the Nigel code, so we're gonna simplify."},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Also, important note; this \"0x00\" is a Hexadecimal number. It's a different way of counting."},
			{'type':'p','style':'margin:0px;', 'innerHTML':"Decimal goes: 0 1 2 3 4 5 6 7 8 9 10"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"Hexadecimal goes: 0 1 2 3 4 5 6 7 8 9 A B C D E F 10"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"So, the number 0x10 in hexadecimal, is 16 in decimal"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"0x01 = 1"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"0x0A = 10"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"0x23 = 35"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;You can also have bigger numbers, where you just add more numbers after the 'x'"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"0x0023 = 35"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"0x64BF = 25791"},

			{'type':'h2', 'innerHTML':"(New And Improved) Bendy Code"},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(similar to last time) There are five sections to Nigel;"},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150605/4.png', 'caption':''},
			{'type':'list','style':'margin:0px;','form':'unordered','notation':'disc','items':[
				{'type':'p','style':'margin:0px;','innerHTML':
					"Goto" +"<br>"+
					"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This is a single line of code, that moves the execution down to the StartUp code section (skipping over the Interrupt and Command lists)"
				},
				{'type':'p','style':'margin:0px;','innerHTML':
					"Startup Code" +"<br>"+
					"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;is the first section that runs. Here the machine is refreshed, memory stores that the Nigel commands use are cleared out, checks can be done, all sorts of cleaning, autocoding and preparing of the machine. Once finished we move onto.."
				},
				{'type':'p','style':'margin:0px;','innerHTML':
					"Discovery" +"<br>"+
					"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This piece of code, looks at the Memory for the next command, if it's zero, it looks at the next byte for a command (and does that continuously until it finds one)" +"<br>"+
					"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;When it finds one, it puts it into the 'Z register' and then tells the chip to jump to this line in the Program Store. This number has to be between 0x0034 and 0xFFFF (which is way too much, so we're good)"
				},
				{'type':'p','style':'margin:0px;','innerHTML':
					"Command List" +"<br>"+
					"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The linking section. Jumping here, the code figures out what the command number refers to, then this section links forward to the Command Code section to perform the command." +"<br>"+
					"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The Commands are written as high as possible (in the program) to allow for the largest space possible (between 0x0034 and 0xFFFF) it also helps keep things stable. Each command is on a specific line and having code above that is sure to never change, means we don't have to continually change the Nigel command numbers every time some other code changes."
				},
				{'type':'p','style':'margin:0px;','innerHTML':
					"Command Code" +"<br>"+
					"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The bulk of the code, this section takes up most of the space, here all the workings of all the commands are written. Each command code's last action is to add the number of bytes its command took up to the \"program counter\", go back to the start of the Discovery section, and we start all over again."
				},
				{'type':'p','style':'margin:0px;','innerHTML':
					"Interrupt List" +"<br>"+
					"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This section is a little stranger. Similar to the Command Code section, it contains linking code to jump to different areas in the code. Most of these (probably all, infact) haven't been written yet. They are placed at the very top of the program because these are controlled by the chip itself. These commands allow you to avail of the chips features; so you can set up a timer and have the chip notify you when that timer reaches a certain number. Or have it notify you when there's a signal coming in from outside the chip." +"<br>"+
					"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;These notifications are called 'Interrupts', and when they occur, execution jumps to one of the lines in the interrupt section (depending on which one it is) from there, the chip carries on to whatever you have written for it." +"<br>"+
					"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;It can get kinda complicated, but can be really handy for accurate timing and preforming tasks when an external input says its ready. Super handy, though I haven't written anything yet for it, so don't worry about it just yet."
				},
				]
			},

			{'type':'h2', 'innerHTML':"(Shiny And Fresh) Byte Storage"},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The new Memory is huge. The old version had about 80 bytes worth of space; this chip has 2304 bytes. With that said, the first 256 are reserved by the chip (for timers, working registers, output/input control, all sorts of things) leaving 2048 bytes of total usable space, or 2Kb."},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Because it's so much bigger, the addressing system has to be bigger, and in turn I've made the command numbering larger too."},
			{'type':'list','style':'margin:0px;','form':'unordered','notation':'none','items':[
				{'type':'p', 'innerHTML':"- Each byte is addressed using a 4 digit hexadecimal number. But each byte is only 2 digits, thus to have a command that accesses bytes you need two bytes to store the address. Which changes the command code a little."},
				{'type':'p', 'innerHTML':"- Also, because the command list has to start at 0x34 (and for an odd reason, each linking command therein, is considered to be 2 lines long) to have one byte commands would limit us to 101 commands. Using two bytes gives us 32741 commands, which feels much more comfortable. This changes the Discover loop code a little, but fits nicely with the chip, so it's all good"},
				]
			},

			{'type':'h2', 'innerHTML':"Fresh New Nigel Commands"},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Nigel commands have the following byte components;"},
			{'type':'list','style':'margin:0px;','form':'unordered','notation':'disc','items':[
					{'type':'p','style':'margin:0px;', 'innerHTML':"|Com_High8|Com_Low8| --- The Command number" +"<br>"+
						"This is always the first part of a Nigel command, after this, inputs are optional depending on what the command does"
					},
					{'type':'p','style':'margin:0px;', 'innerHTML':"|N| --- A simple plain single byte number"},
					{'type':'p','style':'margin:0px;', 'innerHTML':"|N_High8|N_Low8| --- A simple plain double byte number"},
					{'type':'p','style':'margin:0px;', 'innerHTML':"|F_High8|F_Low8| --- An address to a byte in the Memory"},
					{'type':'p','style':'margin:0px;', 'innerHTML':"|Com| --- a command switch for the command (for example, telling the If command, whether to to judge as equal, less than, greater than, etc.)"},
					{'type':'p','style':'margin:0px;', 'innerHTML':"|Port| --- used in input/output commands to select the desired port number"},
				]
			},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- used by For commands ---"},
			{'type':'list','style':'margin:0px;','form':'unordered','notation':'disc','items':[
					{'type':'p','style':'margin:0px;', 'innerHTML':"|i_F_High8|i_F_Low8| --- used  to select the location in Memory where the counter will be held"},
					{'type':'p','style':'margin:0px;', 'innerHTML':"|EndNumber| --- A simple plain single byte number to determine what the ending number is (if the 'i' value is equal to it; the For loop ends (assuming |Com| was set to '=' )) "},
					{'type':'p','style':'margin:0px;', 'innerHTML':"|EndNumber_F_High8|EndNumber_F_Low8| ---  An address to a byte in the Memory where the ending number can be found (if the 'i' value is equal to it; the For loop ends (assuming |Com| was set to '=' ))"},
					{'type':'p','style':'margin:0px;', 'innerHTML':"|StepSize| --- A simple plain single byte number to determine the step size will be (what number will be added or subtracted to 'i' on the completion of every loop)"},
					{'type':'p','style':'margin:0px;', 'innerHTML':"|StepSize_F_High8|StepSize_F_Low8| --- An address to a byte in the Memory where the step size can be found (what number will be added or subtracted to 'i' on the completion of every loop)"},
					{'type':'p','style':'margin:0px; word-break: break-all;', 'innerHTML':"|FirstCommandOfFor'dCodeAddress_High8|FirstCommandOfFor'dCodeAddress_Low8| --- An address to the first byte of all the code the programmer wants to be placed in the For loop"},
				]
			},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- used by If commands ---"},
			{'type':'list','style':'margin:0px;','form':'unordered','notation':'disc','items':[
					{'type':'p','style':'margin:0px; word-break: break-all;', 'innerHTML':"|FirstCommandAfterIf'dCodeAddress_High8|FirstCommandAfterIf'dCodeAddress_Low8| --- An address to the first byte after all of the code that the programmer wants to be placed in the If command"},
				]
			},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;So far, the functional commands are.. "},

			{'type':'h3', 'innerHTML':"- System Commands -"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"STOP - |Com_High8|Com_Low8| "},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Traps execution in infinite loop, essentially ending the program (though if interrupts are set up, program could conceivably start again...may change this in future)"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"RESET_ - |Com_High8|Com_Low8| "},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Sends execution back to the start of the program (way up at the first Goto)"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"Soft_Restart - |Com_High8|Com_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Places a zero in Nigels program counter. This way, the StartUp section isn't run again, but we start the Nigel code from the start."},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"Goto_- |Com_High8|Com_Low8|N_High8|N_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Goes to the byte in Memory selected with |HighN|LowN| (automatically adds 0x0100 to it, so it's the first byte of usable Memory)"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"Sleep_ - |Com_High8|Com_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Activates the chips 'Sleep' function (a low power mode, where an interrupt can wake it back up) "},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"Nop_ - |Com_High8|Com_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Do nothing"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"Wait - |Com_High8|Com_Low8|Com|N_High8|N_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Makes the chip wait for a length of time (selected by the |N_High8|N_Low8| inputs) can wait in milliseconds or seconds"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;00 Milliseconds (desired time + 0.00425 milliseconds) (gains 3.1 milliseconds every 10 seconds)"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;01 Seconds (can't recommend it right now for accuracy reasons)"},
			{'type':'p', 'innerHTML':""},

			{'type':'h3', 'innerHTML':"- Chip Pin Control -"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"PortDirection - |Com_High8|Com_Low8|Port|N|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Allows the user to set a port's pins to input or output (1 for in, 0 for out) "},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"SetPort - |Com_High8|Com_Low8|Port|N|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Sets a port's pins to Powered or Unpowered (during output)"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"ReadPort - |Com_High8|Com_Low8|Port|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Reads a port's pins (during input) and place results in a byte in memory"},
			{'type':'p', 'innerHTML':""},			

			{'type':'h3', 'innerHTML':"- Bitwise Operations -"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"SetFbit - |Com_High8|Com_Low8|F_High8|F_Low8|N|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Sets bit number N in byte |F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so for example, Set bit 6 means 00000000 becomes 01000000)"},			
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"ClearFbit - |Com_High8|Com_Low8|F_High8|F_Low8|N|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Clears bit number N in byte |F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so for example, Clear bit 6 means 11111111 becomes 10111111)"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"BitShiftFLeft - |Com_High8|Com_Low8|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Left shifts the bits in byte |F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so for example, 01010110 becomes 10101100)"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"BitShiftFRight - |Com_High8|Com_Low8|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Right shifts the bits in byte |F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so for example, 01010110 becomes 00101011)"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"SwapNibblesInF - |Com_High8|Com_Low8|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Swaps the first and last 4 bits of byte |F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so for example, 01100101 becomes 01010110)"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"FlipBits - |Com_High8|Com_Low8|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Inverts the bits of byte |F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so for example, 01100101 becomes 10011010)"},
			{'type':'p', 'innerHTML':""},

			{'type':'h3', 'innerHTML':"- Move Number -"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"putNinF - |Com_High8|Com_Low8|N|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Places N into byte |F_High8|F_Low8|"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"putFinF - |Com_High8|Com_Low8|F_High8|F_Low8|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Places the first byte |F_High8|F_Low8| into the second byte |F_High8|F_Low8|"},
			{'type':'p', 'innerHTML':""},

			{'type':'h3', 'innerHTML':"- And/Or -"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"AndNwithF - |Com_High8|Com_Low8|N|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Performs an 'AND' operation on the bits in N and the byte |F_High8|F_Low8|, and places the result in the byte |F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so, 00001111 AND 01010101. becomes 00000101, for example)"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"AndFwithF - |Com_High8|Com_Low8|F_High8|F_Low8|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Performs an 'AND' operation on the bits in the first byte |F_High8|F_Low8| and the second byte |F_High8|F_Low8|, and places the result in the second byte |F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so, 00110011 AND 01010101. becomes 00010001, for example)"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"NAndNwithF - |Com_High8|Com_Low8|N|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Performs an 'NotAND' operation on the bits in N and the byte |F_High8|F_Low8|, and places the result in the byte |F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so, 00001111 AND 01010101. becomes 11111010, for example)"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"NAndFwithF - |Com_High8|Com_Low8|F_High8|F_Low8|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Performs an 'NotAND' operation on the bits in the first byte |F_High8|F_Low8| and the second byte |F_High8|F_Low8|, and places the result in the second byte |F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so, 00110011 AND 01010101. becomes 11101110, for example)"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"OrNwithF - |Com_High8|Com_Low8|N|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Performs an 'OR' operation on the bits in N and the byte |F_High8|F_Low8|, and places the result in the byte |F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so, 00001111 AND 01010101. becomes 01011111, for example)"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"OrFwithF - |Com_High8|Com_Low8|F_High8|F_Low8|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Performs an 'OR' operation on the bits in the first byte |F_High8|F_Low8| and the second byte |F_High8|F_Low8|, and places the result in the second byte |F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so, 00110011 AND 01010101. becomes 01110111, for example)"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"NOrNwithF - |Com_High8|Com_Low8|N|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Performs an 'NotOR' operation on the bits in N and the byte |F_High8|F_Low8|, and places the result in the byte |F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so, 00001111 AND 01010101. becomes 10100000, for example)"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"NOrFwithF - |Com_High8|Com_Low8|F_High8|F_Low8|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Performs an 'NotOR' operation on the bits in the first byte |F_High8|F_Low8| and the second byte |F_High8|F_Low8|, and places the result in the second byte |F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so, 00110011 AND 01010101. becomes 10001000, for example)"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"EOrNwithF - |Com_High8|Com_Low8|N|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Performs an 'ExclusiveOR' operation on the bits in N and the byte |F_High8|F_Low8|, and places the result in the byte |F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so, 00001111 AND 01010101. becomes 01011010, for example)"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"EOrFwithF - |Com_High8|Com_Low8|F_High8|F_Low8|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Performs an 'ExclusiveOR' operation on the bits in the first byte |F_High8|F_Low8| and the second byte |F_High8|F_Low8|, and places the result in the second byte |F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so, 00110011 AND 01010101. becomes 01100110, for example)"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"NEOrNwithF - |Com_High8|Com_Low8|N|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Performs an 'NotExclusiveOR' operation on the bits in N and the byte |F_High8|F_Low8|, and places the result in the byte |F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so, 00001111 AND 01010101. becomes 10100101, for example)"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"NEOrFwithF - |Com_High8|Com_Low8|F_High8|F_Low8|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Performs an 'NotExclusiveOR' operation on the bits in the first byte |F_High8|F_Low8| and the second byte |F_High8|F_Low8|, and places the result in the second byte |F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so, 00110011 AND 01010101. becomes 10011001, for example)"},
			{'type':'p', 'innerHTML':""},

			{'type':'h3', 'innerHTML':"- Math Operations -"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"incrimentFby1 - |Com_High8|Com_Low8|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Adds 1 to the byte |F_High8|F_Low8|"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"decrimentFby1 - |Com_High8|Com_Low8|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Subtracts 1 from the byte |F_High8|F_Low8|"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"MakeFnegitive - |Com_High8|Com_Low8|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Makes the byte |F_High8|F_Low8| negative (by inverting the bits then adding one (two's compliment)) "},		
			{'type':'p', 'innerHTML':"&nbsp;"},	
			{'type':'p','style':'margin:0px;', 'innerHTML':"addNtoF - |Com_High8|Com_Low8|N|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Adds the value N to byte |F_High8|F_Low8|"},
			{'type':'p', 'innerHTML':""},	
			{'type':'p','style':'margin:0px;', 'innerHTML':"addFtoF - |Com_High8|Com_Low8|N|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Adds the value in the first byte |F_High8|F_Low8| to the second byte |F_High8|F_Low8|"},
			{'type':'p', 'innerHTML':""},	
			{'type':'p','style':'margin:0px;', 'innerHTML':"subtractNtoF - |Com_High8|Com_Low8|N|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Subtracts the value N from byte |F_High8|F_Low8|"},
			{'type':'p', 'innerHTML':""},	
			{'type':'p','style':'margin:0px;', 'innerHTML':"subtractFtoF - |Com_High8|Com_Low8|N|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Subtracts the value in the first byte |F_High8|F_Low8| from the second byte |F_High8|F_Low8|"},		
			{'type':'p', 'innerHTML':"&nbsp;"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"SquareF - |Com_High8|Com_Low8|F_High8|F_Low8|F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- Squares the value in the first byte |F_High8|F_Low8| and places the result back in it. If the result is larger than what one byte can hold (and assuming the second bytes details have been added) the higher byte value is placed in the second byte |F_High8|F_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so, if you write xx xx 02 00 00 00, and the value in byte 0x0200 is 0x05; it will put the value 0x19 in byte 0x0200. If you type xx xx 02 00 02 01, and the value in 0x0200 is 0x14, it will place 0x90 in 0x0200 and 0x01 in 0x0201. But, if you type xx xx 02 00 00 00, and the value in 0x0200 is 0x14, it will place 0x90 in 0x0200 and do nothing else)"},
			{'type':'p', 'innerHTML':""},
			
			{'type':'h3', 'innerHTML':"- If Statements -"},			
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px; word-break: break-all;', 'innerHTML':"IsN_F - |ComHigh8|ComLow8|Com|N|F_High8|F_Low8|FirstCommandAfterIf'dCodeAddress_High8|FirstCommandAfterIf'dCodeAddress_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- This command judges N off byte |F_High8|F_Low8|, if it returns true, the code contained in the If statement is run, if not, it jumps to the first command after the code contained in the If statement. You have to use your imagination a little for this one."},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Com Switches: 00 = 01 > 02 < 03 >= 04 <= 05 !="},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px; word-break: break-all;', 'innerHTML':"IsF_F - |ComHigh8|ComLow8|Com|F_High8|F_Low8|F_High8|F_Low8|FirstCommandAfterIf'dCodeAddress_High8|FirstCommandAfterIf'dCodeAddress_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- This command judges the first byte |F_High8|F_Low8| off the second byte |F_High8|F_Low8|, if it returns true, the code contained in the If statement is run, if not, it jumps to the first command after the code contained in the If statement. You have to use your imagination a little for this one too, but not as much."},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Com Switches: 00 = 01 > 02 < 03 >= 04 <= 05 !="},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150605/5.png', 'caption':''},			
			
			{'type':'h3', 'innerHTML':"- If With Else -"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;There is no specific command for this, you need to use an 'if' statement with a 'Goto' command to achieve this."},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150605/6.png', 'caption':''},

			{'type':'h3', 'innerHTML':"- Do While Loop -"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;To do a dowhile loop, use a While statement, and set the \"FirstCommandOfWhile'dCodeAddress\" to a location before the While statement begins (and don't forget a way to change the byte |F_High8|F_Low8| so you don't get an infinite loop)"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If the statement returns false, the loop starts again."},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Com Switches: 00 = 01 > 02 < 03 >= 04 <= 05 !="},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150605/7.png', 'caption':''},	

			{'type':'h3', 'innerHTML':"- While Loop -"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;To do a while loop, use a While statement, and set the \"FirstCommandOfWhile'dCodeAddress\" to a location before the While statement begins. Then before this point, add in a Goto command to bring you to the start of the if statement (and don't forget a way to change the byte |F_High8|F_Low8| so you don't get an infinite loop)"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;If the statement returns false, the loop starts again."},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Com Switches: 00 = 01 > 02 < 03 >= 04 <= 05 !="},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150605/8.png', 'caption':''},

			{'type':'h3', 'innerHTML':"- For Loop -"},
			{'type':'p', 'innerHTML':""},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;There are a few different flavors of the ForLoop, but they all basically work the same way. You write the code you want to loop before the For command, then tell the For command where this code starts. The command needs a byte as a counter for itself - I, an EndNumber (a value to judge this counter off (it can be a simple value or an address to a byte)) and a StepSize (a value that it added to the counter at the end of each loop (it also can be a simple value or an address to a byte))"},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150605/9.png', 'caption':''},			
			{'type':'p','style':'margin:2px; word-break: break-all;', 'innerHTML':"For_ - |ComHigh8|ComLow8|Com|i_F_High8|i_F_Low8|EndNumber|StepSize|FirstCommandOfFor'dCodeAddress_High8|FirstCommandOfFor'dCodeAddress_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- For so long as byte |i_F_High8|i_F_Low8| is |Com| than value |EndNumber|, perform code in For loop, when completed add value |StepSize| to byte |i_F_High8|i_F_Low8| and start again"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Com Switches: 00 = 01 > 02 < 03 >= 04 <= 05 !="},			
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so, for example, xx xx 00 02 00 03 01 01 10; assuming the value in 0x0200 is 0x00, the code between the end of this For command, and byte number 0x0110 will be run, then 0x01 will be added to byte 0x0200, and the value in there will be judged against the value 0x03 to see if they are equal. If they are, the code is skipped, and we go to byte 0x0110 to run the rest of the program. This loop should happen 3 times)"},			
			{'type':'p', 'innerHTML':"&nbsp;"},
			{'type':'p','style':'margin:2px; word-break: break-all;', 'innerHTML':"For_E - |ComHigh8|ComLow8|Com|i_F_High8|i_F_Low8|EndNumber_High8|EndNumber_Low8|StepSize|FirstCommandOfFor'dCodeAddress_High8|FirstCommandOfFor'dCodeAddress_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- For so long as byte |i_F_High8|i_F_Low8| is |Com| than value in byte |EndNumber_High8|EndNumber_Low8 |, perform code in For loop, when completed add value |StepSize| to byte |i_F_High8|i_F_Low8| and start again"},			
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Com Switches: 00 = 01 > 02 < 03 >= 04 <= 05 !="},			
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so, for example, xx xx 00 02 00 02 01 01 01 10; assuming the value in 0x0200 is 0x00, the code between the end of this For command, and byte number 0x0110 will be run, then 0x01 will be added to byte 0x0200, and the value in there will be judged against the value in byte 0x0201 to see if they are equal. If they are, the code is skipped, and we go to byte 0x0110 to run the rest of the program. This loop should happen 3 times)"},		
			{'type':'p', 'innerHTML':"&nbsp;"},
			{'type':'p','style':'margin:2px; word-break: break-all;', 'innerHTML':"For_S - |ComHigh8|ComLow8|Com|i_F_High8|i_F_Low8|EndNumber|StepSize_High8|StepSize_Low8|FirstCommandOfFor'dCodeAddress_High8|FirstCommandOfFor'dCodeAddress_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- For so long as byte |i_F_High8|i_F_Low8| is |Com| than value |EndNumber|, perform code in For loop, when completed add the value in byte |StepSize_High8|StepSize_Low8| to byte |i_F_High8|i_F_Low8| and start again"},			
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Com Switches: 00 = 01 > 02 < 03 >= 04 <= 05 !="},			
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so, for example, xx xx 00 02 00 03 02 01 01 10; assuming the value in 0x0200 is 0x00,  the code between the end of this For command, and byte number 0x0110 will be run, then byte 0x0201 will be added to byte 0x0200, and the value in there will be judged against the value 0x03 to see if they are equal. If they are, the code is skipped, and we go to byte 0x0110 to run the rest of the program. This loop should happen 3 times)"},
			{'type':'p', 'innerHTML':"&nbsp;"},
			{'type':'p','style':'margin:2px; word-break: break-all;', 'innerHTML':"For_ES - |ComHigh8|ComLow8|Com|i_F_High8|i_F_Low8|EndNumber_High8|EndNumber_Low8|StepSize_High8|StepSize_Low8|FirstCommandOfFor'dCodeAddress_High8|FirstCommandOfFor'dCodeAddress_Low8|"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;--- For so long as byte |i_F_High8|i_F_Low8| is |Com| than the value in byte |EndNumber_High8|EndNumber_Low8 |, perform code in For loop, when completed add the value in byte |StepSize_High8|StepSize_Low8| to byte |i_F_High8|i_F_Low8| and start again"},			
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Com Switches: 00 = 01 > 02 < 03 >= 04 <= 05 !="},			
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(so, for example, xx xx 00 02 00 02 01 02 02 01 10; assuming the value in 0x0200 is 0x00,  the code between the end of this For command, and byte number 0x0110 will be run, then byte 0x0202 will be added to byte 0x0200, and the value in there will be judged against the value in byte 0x0201 to see if they are equal. If they are, the code is skipped, and we go to byte 0x0110 to run the rest of the program. This loop should happen 3 times)"},
			{'type':'p', 'innerHTML':""},

			{'type':'h2', 'innerHTML':"So, what now?"},			
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Obviously, this list of commands is going to be expanded, and I'm planning on creating (at least) two new different versions of Nigel for audio and graphics, so any changes from here out, I'll talk about in later posts (instead of editing this one) and if you wanna download the code for yourself, you can get it aswel as my handy chip information files from the Google Drive"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;I'm still gonna make this project public, so you can go see the Nigel Develpoment Log and download the workspace to look at and mess around with from here: "},
			{'type':'p','style':'margin:0px; word-break: break-all;', 'innerHTML':"<a href='https://drive.google.com/folderview?id=0B7-r9goff8SZfi1wdEQwQXRFeHRIRTlzdThGRjA1MW5mZkxyRmpzWlgzbTVEbU85anpNWnc&usp=sharing'>https://drive.google.com/folderview?id=0B7-r9goff8SZfi1wdEQwQXRFeHRIRTlzdThGRjA1MW5mZkxyRmpzWlgzbTVEbU85anpNWnc&usp=sharing</a>"},
			{'type':'p','style':'margin:0px;', 'innerHTML':"You're also going to need a version of Atmel Studio "},
			{'type':'p','style':'margin:0px;', 'innerHTML':"<a href='http://www.atmel.com/microsite/atmel_studio6/'>http://www.atmel.com/microsite/atmel_studio6/</a>"},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This could be the start of something very interesting. We have a chip that we can program easily, that has plenty of space and is quite fast (20MHz). We have a language that shows real promise, and we have a clear direct vision (ish) of where we're going. Chaps; this could be really cool :D"},
			
			{'type':'h2', 'innerHTML':"Remember Anica?"},	
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Yeah..the Anica project has essentially been shelved, but it is not forgotten. Having a chip that we can program and wire into things, brings us way forward, but we lose alot of the control and complete features that we would have gotten from the custom architecture. What is does do though, is give us a better insight into what is really required from a chip. By programming this one, and going as far and as advanced as we can go, we will learn more about what the Anica architecture needs to be, when we return. "},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Till then, let's keep coding, working on Nigel. There needs to be some way of writing Nigel code, using the machine, so graphics and an input device are required. I'm hoping to make a higher language that can convert into Nigel code, allowing for programs to be less machine like, and more natural to how people think. That is, ofcourse, way down the line (but maybe not that far)"},
			{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Anyway, until next time,"},
			{'type':'img', 'src':'http://metasophiea.com/projects/nigel/images/20150605/10.jpg', 'caption':''},

			{'type':'p','style':'margin:0px; text-align: right;', 'innerHTML':"Posted 5th June 2015"},
		]
	}
	
	
	
	
	
	
	
	
	
	
	
];

//{'type':'img', 'src':'', 'caption':''},
//{'type':'p', 'innerHTML':"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"},
//{'type':'p', 'innerHTML':""},
//{'type':'h2', 'innerHTML':""},

/*
				{'type':'p','style':'margin:0px;','innerHTML':
					"" +"<br>"+
				},
*/


/*
	{'type':'list','style':'margin:0px;','form':'unordered','notation':'disc','items':[
		'<batch>',	{'type':'p','style':'margin:0px;','innerHTML':""},
		'</batch>',
		'<batch>',	{'type':'p','style':'margin:0px;','innerHTML':""},
		'</batch>',
		]
	},
*/
