<!DOCTYPE html>
<html lang="en">

<head>
	<title>metasophiea</title>
	<meta charset="utf-8"></meta>
<!-- Info -->
	<!-- favcon: <link rel="icon" href="|url|" type="image/gif" sizes="16x16"> -->
	<!-- Chrome Browser Colour: <meta name="theme-color" content="#db5945"></meta> -->
	<!-- add: xmlns="http://www.w3.org/2000/svg" to SVG element -->
	<!-- add: <link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family="> for google fonts-->
	
<!-- Fonts -->
	<link rel="stylesheet" type="text/css" href="https://fonts.googleapis.com/css?family=Arvo">

<!-- Git stuff -->
	<!-- http://rawgit.com/metasophiea/[rest of Github raw address] - for testing (quicker update)(favicon.ico set to rawgit.com's taco-lookin' thing (white remote-control with chunk of smoked salmon on it?)(pedestal suporting Donald Trump's hair?)) -->
	<!-- http://cdn.rawgit.com/metasophiea/[rest of Github raw address] - for full use (favicon.ico open)-->
<!-- Scripts -->
	<!--[if lt IE 9]><script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script><![endif]-->
	<!-- <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script> --> <!-- for JSON -->
	<!-- <script src="http://metasophiea.com/Useful_Items/JavaScript/CSS_Edit.js"></script> --> <!-- for CSS_Edit -->
	<script>
		function Go(){
			console.log("hello");
			createConnection();

			setTimeout(function() {
				console.log("-- -- -- -- --");
				sendChannel.send("hello");
				sendChannel.send("hello again");		
			}, 1000);

			setTimeout(function() {
				console.log("-- -- -- -- --");
				closeDataChannels();			
			}, 2000);
		}



var localConnection;
var remoteConnection;
var sendChannel;
var receiveChannel;
var pcConstraint;
var dataConstraint;

	function createConnection() {
		var servers = { iceServers: [
				{urls: "stun:stun.services.mozilla.com", username: "louis@mozilla.com", credential: "webrtcdemo"}
			]
		};
		pcConstraint = null; dataConstraint = null;

	//Outgoing
  		window.localConnection = localConnection = new RTCPeerConnection(servers, pcConstraint);
  		sendChannel = localConnection.createDataChannel('sendDataChannel',dataConstraint);
  		localConnection.onicecandidate = iceCallback1;
  		sendChannel.onopen = onSendChannelStateChange;
  		sendChannel.onclose = onSendChannelStateChange;

	//Incoming
  		window.remoteConnection = remoteConnection = new RTCPeerConnection(servers, pcConstraint);
  		remoteConnection.onicecandidate = iceCallback2;
  		remoteConnection.ondatachannel = receiveChannelCallback;

  		localConnection.createOffer(gotDescription1, onCreateSessionDescriptionError);
	}



function closeDataChannels() {
  sendChannel.close();
  receiveChannel.close();
  localConnection.close();
  remoteConnection.close();
  localConnection = null;
  remoteConnection = null;
}

function gotDescription1(description) {
  localConnection.setLocalDescription(description);
  remoteConnection.setRemoteDescription(description);
  remoteConnection.createAnswer(gotDescription2, onCreateSessionDescriptionError);
}

function gotDescription2(description) {
  remoteConnection.setLocalDescription(description);
  localConnection.setRemoteDescription(description);
}

function iceCallback1(event) {
  if (event.candidate) {
    remoteConnection.addIceCandidate(event.candidate, onAddIceCandidateSuccess, onAddIceCandidateError);
  }
}

function iceCallback2(event) {
  if (event.candidate) {
    localConnection.addIceCandidate(event.candidate, onAddIceCandidateSuccess, onAddIceCandidateError);
  }
}

function receiveChannelCallback(event) {
  receiveChannel = event.channel;
  receiveChannel.onmessage = onReceiveMessageCallback;
  receiveChannel.onopen = onReceiveChannelStateChange;
  receiveChannel.onclose = onReceiveChannelStateChange;
}

function onReceiveMessageCallback(event) {console.log(event);}
function onSendChannelStateChange() {}
function onReceiveChannelStateChange() {}
function onAddIceCandidateSuccess() {}
function onAddIceCandidateError(error) {}
function onCreateSessionDescriptionError(error) {}

	</script>

	<style title="Main">
		html, body{
			width:100%; height:100%; margin:0px;
			/* overflow-x: hidden; overflow-y: hidden; */
		}

	</style>
</head>

<body onLoad="Go()">
	<h1>Hello</h1>
</body>
</html>
